---
version: 2.1

parameters:
  promote:
    type: boolean
    default: false
  version:
    type: string
    default: ""

docker_auth: &docker_auth
  username: $DOCKERHUB_USERNAME
  password: $DOCKERHUB_PASSWORD

defaults: &defaults
  docker:
    - image: greenpeaceinternational/circleci-base:latest
      auth:
        <<: *docker_auth
  working_directory: /tmp/workspace/

test_defaults: &test_defaults
  machine:
    image: ubuntu-2204:2023.02.1
  resource_class: large
  working_directory: ~/planet4-develop
  parameters:
    pipeline:
      default: "develop"
      type: string

orbs:
  slack: circleci/slack@3.4.2

job_definitions:
  test_steps: &test_steps
    steps:
      - run:
          name: Checkout planet4-develop repo
          command: |
            git clone https://github.com/greenpeace/planet4-develop .
      - when:
          condition:
            equal: ["develop", << parameters.pipeline >>]
          steps:
            - run:
                name: Set current branch
                command: |
                  echo $(jq ".planet4.repos[\"planet4-base\"] = \"${CIRCLE_BRANCH}\"" .p4-env.json) > .p4-env.json
                  cat .p4-env.json
      - when:
          condition:
            equal: ["prepare-release", << parameters.pipeline >>]
          steps:
            - run:
                name: Set production app tags
                command: |
                  curl -o production.json https://raw.githubusercontent.com/greenpeace/planet4-base/release/production.json
                  theme_version=$(jq -r '.[] | ."greenpeace/planet4-master-theme"' production.json)
                  plugin_version=$(jq -r '.[] | ."greenpeace/planet4-plugin-gutenberg-blocks"' production.json)
                  echo $(jq ".planet4.repos[\"planet4-master-theme\"] = \"${theme_version}\"" .p4-env.json) > .p4-env.json
                  echo $(jq ".planet4.repos[\"planet4-plugin-gutenberg-blocks\"] = \"${plugin_version}\"" .p4-env.json) > .p4-env.json
      - run:
          name: Install dependencies
          command: |
              nvm install 16
      - run:
          name: Install environment
          environment:
            VERBOSE: true
          command: |
            nvm use
            npm install
            npm run env:requirements
            npm run env:install
            npm run elastic:activate
      - run:
          name: E2E tests
          environment:
            CI:
            PW_RETRIES: 1
            PW_WORKERS: 3
            PW_TEST_HTML_REPORT_OPEN: "never"
          command: |
            echo -e "\n# Planet4 local development environment\n127.0.0.1\twww.planet4.test" | sudo tee -a /etc/hosts;
            nvm use
            npm run env:e2e-install -- --with-deps
            npm run env:e2e
      - run:
          name: Extract tests artifacts
          when: always
          command: |
            mkdir -p /home/circleci/artifacts/playwright/themes /home/circleci/artifacts/playwright/plugins
            cp -r planet4/themes/planet4-master-theme/e2e-* /home/circleci/artifacts/playwright/themes || true
            cp planet4/themes/planet4-master-theme/results.xml /home/circleci/artifacts/playwright/themes || true
            cp -r planet4/plugins/planet4-plugin-gutenberg-blocks/e2e-* /home/circleci/artifacts/playwright/plugins || true
            cp planet4/plugins/planet4-plugin-gutenberg-blocks/results.xml /home/circleci/artifacts/playwright/plugins || true
      - store_test_results:
          path: /home/circleci/artifacts
      - store_artifacts:
          path: /home/circleci/artifacts

jobs:
  lint:
    <<: *defaults
    steps:
      - checkout
      - run: make lint

  test:
    <<: *test_defaults
    <<: *test_steps

  test-release:
    <<: *test_defaults
    <<: *test_steps

  release-sites:
    <<: *defaults
    parameters:
      pipeline:
        default: "main"
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Trigger sites release
          command: |
              declare -a sites
              mapfile -t sites < sites.txt
              for i in "${sites[@]}"
              do
                trigger-build.sh git@github.com:greenpeace/planet4-$i.git << parameters.pipeline >>
                sleep 30
              done
      - when:
          condition:
            equal: ["main", << parameters.pipeline >>]
          steps:
            - run:
                name: Trigger dev sites release
                command: |
                    declare -a dev_sites
                    mapfile -t dev_sites < dev_sites.txt
                    for i in "${dev_sites[@]}"
                    do
                      trigger-build.sh git@github.com:greenpeace/planet4-$i.git << parameters.pipeline >>
                    done

  changelog:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure git
          command: |
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
            ' >> ~/.ssh/known_hosts
      - run:
          name: Update Changelog and notify
          command: |
            version=$(git describe --abbrev=0 --tags)
            ./bin/changelog.py --version "$version"
            source $BASH_ENV
      - slack/notify:
          channel: C014UMRC4AJ
          mentions: here
          color: '#78c043'
          message: "${CHANGELOG}"
          include_job_number_field: false
          include_project_field: false
          include_visit_job_action: false

  rollback-sites:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Trigger sites rollback
          command: |
              declare -a sites
              mapfile -t sites < sites.txt
              for i in "${sites[@]}"
              do
                ./bin/rollback.sh planet4-$i ${CIRCLE_TOKEN}
              done

  trigger-production:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Check if this is a release commit
          command: |
            commit_message=$(git log -1 HEAD)
            if [[ "$commit_message" != *"[release]"* ]]; then
              echo "Not a release commit"
              circleci-agent step halt
            fi
      - run:
          name: Create new tag
          command: |
            commit_message=$(git log -1 HEAD)
            ./bin/tag.py "${commit_message}"

  promote:
    <<: *defaults
    working_directory: /tmp/workspace/
    parameters:
      version:
        default: ""
        type: string
    steps:
      - checkout
      - run:
          name: Promote version
          command: ./bin/promote.py << parameters.version >>

workflow_definitions:
  branch: &branch
    context: org-global
    filters:
      branches:
        ignore: release

  main: &main
    context: org-global
    filters:
      branches:
        only: main

  rc: &rc
    context: org-global
    filters:
      branches:
        only: release

  tag: &tag
    context: org-global
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /^v.*/

workflows:
  develop:
    unless:
      or:
        - << pipeline.parameters.promote >>
    jobs:
      - lint
      - test:
          <<: *branch
          pipeline: develop
          requires:
            - lint
      - hold-dev-sites:
          <<: *main
          type: approval
          requires:
            - test
      - release-sites:
          <<: *main
          pipeline: main
          requires:
            - hold-dev-sites
      - trigger-production:
          <<: *main
      - test-release:
          <<: *rc
          pipeline: prepare-release
          requires:
            - lint

  cron-develop:
    triggers:
      - schedule:
          cron: "0 12 * * 0"
          filters:
            branches:
              only:
                - main
    jobs:
      - test:
          context: org-global
      - release-sites:
          context: org-global
          pipeline: main
          requires:
            - test

  promote:
    when: << pipeline.parameters.promote >>
    jobs:
      - promote:
          <<: *main
          version: << pipeline.parameters.version >>

  release:
    jobs:
      - release-sites:
          <<: *tag
          pipeline: tag
      - hold-changelog:
          <<: *tag
          type: approval
          requires:
            - release-sites
      - changelog:
          <<: *tag
          requires:
            - hold-changelog

  rollback:
    jobs:
      - hold-rollback:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /rollback-v*/
      - rollback-sites:
          context: org-global
          requires:
            - hold-rollback
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /rollback-v*/
